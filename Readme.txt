1. 拿到一个项目之后，先看下各自的功能，然后再看下各自的各个模块，最后再看下点击之后每个页面，哪里是变化的，而哪里是不变的
   就拿这个项目来说，当点击各个模块，例如首页，会员，购物车，搜索之后，发现每个页面的头部和底部是不变的，唯一有变化的就是
   他的中间部分，而且中间部分是随着点击底部的选项卡变化的，那么则说明这个项目暂时可以分为三个部分组成，头部的Header，中间
   部分由于是随着底部的变化而变化的，而且从地址栏来看，每点击一个选项卡，他的地址栏都会像路由那样变化，点击底部四个按钮，
   中间应该切换不同的组件，所以中间部分是由路由组成的，底部的 Tabbar 导航栏也是固定的

2. 做项目的时候，要看下对应的模块，有没有现成的，再看看别人有没有，最后都没有，只能自己写，如果有的话，就直接拿过来用就好
   然后发现我们这个项目是有这个头部的，在 Mint-UI 里面,底部的 Tabbar 是在 MUI 里面的

3. 拿过来用之后，要把对应的修改为自己的，而且看demo可以看出来，点击底部四个按钮，地址栏会随着变化，而且中间部分也会随着
   切换到对应的组件去，所以我们应该给底部四个按钮添加路由链接，所以要启用路由，启用路由之前，要先配置路由：
   3.1 导入路由的包
    import VueRouter from 'vue-router'
   3.2 安装路由模块
    Vue.use(VueRouter)
   3.3 导入自己的 router.js 路由模块(router.js 写自己的路由对象)
    import router from './router.js'
   3.4 挂载路由对象到 VM 实例上
    router:routerObj

4. 底部四个按钮都是 a 链接，要把他们改成 router-link,然后把相应的 href 改成 to, 把 # 改成 /

5. 底部四个按钮，本来是默认第一个高亮，但是我们的 demo 是要我们每次选中的那个高亮，而不是就第一个高亮，所以我们要找到
   原本为啥会高亮的的原因是 mui-active，而且我们把a改成router-link之后，每次点击选中的那个就会出现一个隐藏的
   类为：router-link-active
   第一种办法就是把 mui-active 这个删掉，然后给 router-link-active 这个类设置一个样式。
   第二种办法就是把 router-link-active 直接改成 mui-active 去路由对象 router.js 里面的配置属性修改

6. 点击 tabbar 中的路由链接，展示对应的路由组件
   6.1 新建文件夹存放这四个路由组件，然后再在这个文件夹里面新建四个路由组件，也就是 .vue 文件
   6.2 在 router.js 路由对象文件中，导入这四个路由组件，然后在路由对象里面，配置这四个路由规则
   6.3 在配置路由规则的时候，path 里面的路径的一定要跟 to 里面的路径一致，不然会找不到路由
   6.4 在要显示的页面(App.vue)，给他一个容器<router-view>,才会显示出来，不然显示不了

7. 首页轮播图布局 也去 Mint-UI 里面找，找到之后直接应用就好,应用完之后会发现，在项目中不显示，但是查看元素发现，元素还在，
   那么这时候你就要给父元素设置一个高度了，这样才能显示的出来

8. 加载首页轮播图数据(由于这边没有服务器，只能用假数据，但是步骤还是要的)
   8.1 通过 vue-resource 来获取数据，通过 cnpm i vue-resource -S 来安装 vue-resource
   8.2 在 main.js 中导入，安装 vue-resource
   8.3 安装，导入之后，我们就可以在每一个组件里面通过 this.$http 来发送数据请求
   8.4 轮播图是要再页面一进去之后就要发送请求了，所以要再 created() 方法内就得发送请求了
   8.5 发送数据请求是业务逻辑，所以应该要再 script 里面进行操作 export default {data:(){return{}},methods:{}}
   8.6 由于我们没有服务器，所以只能用静态数据来表示，但是如果想要在 组件的 data 中获取到本地图片的路径，要用到 require
       才能访问的到 图片
   8.7 数据有了，所以就要把数据渲染到页面中去，用 v-for 来循环 lunbotuList 数组，我们获取到的数据都是在这里
   8.8 静态加载图片的时候，出现图片img标签 src="[object Module]" 这时候就要去配置文件那边修改下 url-loader
       修改为：{ test: /\.(jpg|png|gif|bmp|jpeg)$/, use: [{loader:'url-loader',options:{esModule:false}}] }

9. 首页九宫格改造
   这个九宫格在 Mint-UI 里面是没有的，但是在 MUI 里面是有的，把它拿出来，查看源代码，然后把代码拷贝到首页的组件中，然后
   在进行修改，对应 demo 来修改。

10. 中间四个组件，也就是四个页面互相切换的动画效果：
    10.1 首先我们点击 tabbar 四个按钮切换页面，只有中间部分是互相切换的，头部和底部是不变的，所以如果要加动画的话，那就
         直接在 <router-view></router-view> 之前价格 transition 就可以了，动画的是谁就在谁那加
    10.2 加上 transition 之后，就要给这个 transition 的四个类添加一些样式(.v-enter .v-leave-to .v-enter-active .v-leave-active)
    10.3 给 transition 添加完比较普通的样式之后，会发现他们直接切换会出现很多问题，首先是头部和底部都会出现移位，然后再
         恢复，而且在底部还会出现一个滚动条，还有中间的切换第一个还没消失，第二个页面就进来了，而且还是先在下面，然后在飘
         上去，还有就是第一个页面消失的时候应该是从左边消失，然后第二个页面进来的时候应该是从右边进来，而且都是这样，不是
         随机的
    10.4 头部和底部出现移位：给整个app加上 overflow-x:hidden 属性就可以了，这样就解决了移位和下方出现滚动条的问题
    10.5 第一个页面消失的时候应该是从左边消失，然后第二个页面进来的时候应该是从右边进来:
         我们设置进来的时候是 transform:translateX(100%) 默认是从右边进来的，然后出去(消失)的时候从左边消失，也
         就是 把 v-leave-to 设置成反方向就可以了 transform:translateX(-100%)
    10.6 第一个页面消失的时候，第二个页面会在下方，然后再飘上去的问题：
         给出去(v-leave-to)的时候设置一个绝对定位就可以解决了 position: absolute;

11. 点击新闻资讯按钮，路由跳转到对应的页面中去，首先发现新闻资讯按钮是在首页 homeContent 中的，所以先去这个
    homeContent.vue 页面中修改新闻资讯的路由链接，也就是把 a 改成 router-link 把 href 改成 to,把 to 的内容
    改成 /home/newlist，这个 url 等下要跟 router.js 里面的路由配置 url 一致，改完这个路由链接之后，然后你会
    发现没有新闻资讯列表的页面，所以这时候你就要创建一个新闻资讯列表页面 NewList.vue，一旦你创建了新的 vue 页面
    你就要去路由配置里面添加新的 vue 页面 有关于 NewList.vue 的一些路由配置和路由规则，记得路由配置规则里面的
    path 路径 一定要和首页的 新闻资讯的 to 的路径是一样的

12. a.新闻资讯页面的绘制，使用 MUI 中的 media-list.html
    b.使用 vue-resource 获取数据(没有数据，暂时使用假数据)
    c.渲染真实数据

13. 处理细节问题
    13.1 由于底部有点被 tabbar 给挡住一些，所以要给整个 app.vue 组件设置一个底部样式
    13.2 时间格式不对，要改下时间格式为(2020-07-06)
        修改时间格式有俩中方法：一是设置局部过滤器，二是设置全局过滤器，我们看了demo之后发现，很多地方都需要
        时间，所以我们要设置一个全局过滤器(在 main.js 里面定义)才行，到时候直接用就可以了,可以用一个时间格式化
        插件 moment

14. 点击新闻资讯列表跳转到新闻详情页面
    14.1 把列表中的每一项改成路由链接 <router-link>，同时，在跳转的时候应提供唯一的 ID 标识符
        改成 <router-link> 之后，因为跳转的时候要提供ID，所以在用 to 的时候要用到 item.id 这个表达式，如果不用表达式，那么 to 后面
        直接跟上路径即可，但是这次要用到 item.id 这个表达式，那就不能直接用路径了，要再 to 前面加个 v-bind 然后把路径用单引号弄起来
        然后在加上表达式，有表达式的，一定要用 v-bind 进行绑定
    14.2 创建新闻详情页的组件页面 NewsInfo.vue
    14.3 在 路由模块 中 ，配置路由链接 和 组件关系
    14.4 新闻详情页面，由于数据得不到，只能用假数据，而且因为每个详情页面都是一个数据，而不是一个列表，所以要用对象来表示，所以我们在存放
        服务器数据的时候，要定义一个空对象来存放数据，而不是空数组。所以这也导致了我每个资讯列表点进去都是一样的详情页。

15. 资讯详情页下面的评论区(由整个app可以看出来，不止资讯详情页有评论区，其他地方如图片展示，购物车详情都有评论区，所以最好把评论区抽离为一个公共的组件)
    谁需要就把这个组件导入到自己内部注册一下，注册完之后，就可以以标签的形式来引用这个组件，如何把评论抽离为一个单独的组件？其实只要把它单独
    放到一个 vue 里面就可以了(如果单独封装一个 comment.vue 评论子组件)
    15.1 先创建一个单独的 comment.vue 组件模板(建完之后如何在一个组件里面引用另一个子组件？？)
    15.2 在需要使用 comment 组件的页面中，先手动导入 comment 组件
        import comment from './comment.vue'
    15.3 在父组件中使用 ‘components’ 属性，将刚才导入的 comment 组件，注册为自己的子组件
    15.4 将注册子组件时候的注册名称<comment>，以标签形式在页面中引用即可
    15.5 在评论页面获取数据时出现一个问题那就是服务器给的 url 是 /api/getcomments/:artid?pageindex=1 这说明里面有俩个参数一个是
        artid 还有一个是页数 pageindex 而且在评论页面是没有参数id，那说明参数id是由新闻的那个页面传送过去的，这也就是相当于父组件新
        闻详情页向子组件评论区传值id，所以在父组件的子组件标签上添加一个属性绑定:id="this.id",然后在子组件这边如果想用 父组件传过来的
        id，那么就要在子组件那边用props定义下这个id。
16. 实现点击加载更多按钮，显示更多评论的功能
    16.1 为加载更多按钮绑定点击事件，在事件中，请求下一页数据
    16.2 点击加载更多，让页数 pageIndex 自增+1，即pageIndex++，然后重新调用 this.getComment() 方法重新获取最新一页的数据
    16.3 为了防止新数据覆盖老数据的情况，我们在点击加载更多的时候，每当获取到新数据，应该让老数据调用下数组的 concat 方法，拼接上新数组

17. 发表评论
    17.1 把文本框做双向数据绑定
    17.2 为发表按钮绑定一个事件
    17.3 校验评论内容是否为空，若为空，则Toast提示用户，评论内容不能为空
    17.4 通过 vue-resource 发送一个请求，把评论内容提交给服务器
    17.5 当发表评论完成后，重新刷新列表，以查看最新的评论
        a.如果调用 geiComments 方法重新刷下评论列表的话，可能只能得到最好一页的评论，前几页的评论却获取不到，然而最新的评论都是在第一页的
        b.换一种思路：当评论成功后，在客户端，手动拼接出一个 最新的评论对象 然后调用 数组的 unshift 方法，把最新的评论，追加到 data 中
        comments 的开头，这样就可以完美实现刷新评论列表的需求

18. 改造图片分享按钮为路由的链接并显示对应的组件页面
    返回首页 homeContent.vue 页面对对应的图片分享按钮进行路由链接的修改，把a链接改成router-link href改为to to里面是url地址/home/photolist
    并且新建vue组件页面 photolist.vue 页面，并且到 router.js 页面进行路由的注册和配置

19. 制作图片列表组件页面的结构并美化样式
    19.1 制作顶部的滑动条

        19.1.1 需要借助于 MUI 中的 tab-top-webview-main.html
        19.1.2 需要把 slider 区域的 mui-fullscreen 类去掉
        19.1.3 滑动条无法正常触发滑动，通过检查MUI官方文档，发现这是一个JS的scroll控件，需要被初始化
               a. 导入 mui.js
               b. 调用官方提供的方式去初始化：
               mui('.mui-scroll-wrapper').scroll({
               	deceleration: 0.0005 //flick 减速系数，系数越大，滚动速度越慢，滚动距离越小，默认值0.0006
               });
        19.1.4 我们在初始化滑动条的时候，导入的 mui.js 之后，发现控制台报错：mui.min.js:940 Uncaught T
                ypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode
               经过我们合理的推测，觉得，可能是 mui.js 中用到了 'caller', 'callee', and 'arguments' 这三个东西，但是这三个
               东西一般都是在不严格的模式中使用的，而我们的webpack打包好的 bundle.js 默认是启用严格模式的，所以，这俩个冲突了
               解决办法：a. 把 mui.js 中有关于 'caller', 'callee', and 'arguments' 这三个的代码改掉,但是这个很不现实
                        b. 把 webpack 打包时候的严格模式禁用掉；
               所以最终我们引用了第二个方案，移除严格模式：使用这个插件：babel-plugin-transform-remove-strict-mode，安装完之后
               再去 .babelrc 中的 plugins 添加一个 transform-remove-strict-mode
        19.1.5 刚刚点击进入图片分享页面的时候，滑动条无法正常工作，必须要刷新一次才行，经过我们认真的分析之后，发现，如果要初始化滑动条
                必须要等到 DOM 元素加载完毕，所以，我们把 初始化 滑动条的代码，搬到了 mounted 生命周期函数中。
        19.1.6 当 滑动条 调试OK后，发现，tabbar 无法正常工作了，这时候，我们发现是因为在 tabbar 中有一个类名和 mui.js 中冲突了，
                这个类名就是 mui-tab-item ，所以我们应该找出有关于这个 类名的 所有样式，然后复制到对应的 组件中，最后再把这个类名
                给改成我们自己的
        19.1.7 分类列表上面的选中高亮，并不是路由高亮，而是scroll组件自带的高亮

    19.2 获取所有分类并渲染分类列表的数据
    19.3 制作图片列表区域
        19.3.1 图片加载的时候需要用到懒加载技术(就是在加载图片的时候会出现一个圈圈，在那里转啊转)，我们可以使用 Mint-UI 提供的现成的
                组件'lazy-load'
                懒加载的图标显示不出来，是因为按需导入导致懒加载的图标显示不出来，要用全部导入才行
        19.3.2 根据'lazy-load'的使用文档，尝试使用
        19.3.3 使用成功之后，渲染图片列表数据

20. 点击图片跳转到图片详情页面
    20.1 在改造 li 成为 router-link 的时候，需要用到 tag 属性指定要渲染为 哪种元素(li)

    20.2 图片详情页面的布局和美化，同时获取数据和渲染页面

    20.3 在详情页面放置一个现成的评论子组件
        a. 导入 评论子组件
        import comment from '../subcomponents/comment.vue'
        b. 注册 评论子组件
        components:{
            'cmt-box':comment
        }
        c. 以标签形式引入(有时候需要参数id，那么也将id穿进去)
        <cmt-box :id="id(this.$route.params.id)"></cmt-box>

    20.4 实现图片详情中的 缩略图的功能

        a. 使用 插件 vue-preview 这个缩略图插件 安装 npm i vue-preview -S
           随着版本的更新，vue-preview 版本也随着更新，所以现在用的时候应该按照github里面的指示来使用(https://github.com/LS1231/vue-preview)
           首先安装 npm i vue-preview -S
           然后
           import VuePreview from 'vue-preview'
           Vue.use(VuePreview);
           接着在你需要的地方,加个div比较好改样式
           <div class="thumbs">
            <vue-preview :slides="list"></vue-preview>
           </div>
           最后再添加一个golbal.css,然后在导入进去即可

        b. 获取到所有的图片列表，然后使用 v-for 指令去渲染数据
        c. 注意：img 标签上的 class 不能去掉
        d. 注意：每个 图片数据对象中，必须有 w 和 h 属性

21. 绘制商品列表页面基本结构并美化

22. 尝试在手机上去进行项目的预览和测试
    20.1 要保证自己的手机可以正常运行

    20.2 要保证 手机 和 开发项目的电脑 处于同一个 WiFi 环境中，也就是说 手机 可以 访问到 电脑的 IP

    20.3 打开自己的 项目中 的 package.json 文件，在 dev 脚本中，添加一个 --host 指令，把当前电脑的WiFi IP地址，设置为
         --host 的指令值 如：--host 173.232.25.5

    20.4 如何查看自己电脑所处的 WiFi 的IP 呢，在 cmd 终端中运行 `ipconfig` 查看对应的无线网的 ip 地址
